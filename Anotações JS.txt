typeof x
    - Diz qual o tipo da vari√°vel


5 === '5'
    - Tr√™s sinais de igual s√£o para comparar valor e tipo, se for ripo diferente fica false


Operadores Relacionais
    ! - Nega√ß√£o (not)
    && - Conjun√ß√£o (and)
    || - disjun√ß√£o (or)


Operador tern√°rio
    - media >= 7 ? "Aprovado" : "Reprovado"
    - operador_l√≥gico ? se_verdadeiro : se_falso


window.document.querySelector('p')
    - Puxar uma tag


EVENTOS DOM
    - Podem ser configurados no HTML ou no SCRIPT

    SE for HTML:
        <div id="area" onclick="clicar()" onmouseover="entrou()" onmouseout="saiu()">
            Interaja...
        </div>
    
    SE for no SCRIPT:
        Pegar o id e jogar addEventListener nele:
            var a = window.document.getElementById('area')
            a.addEventListener('click', clicar)
            a.addEventListener('mouseover', entrou)
            a.addEventListener('mouseout', saiu)


EVENTOS MOUSE
    mouseover
        - Quando o mouse entra dentro da div

    mousemove
        - Quando o mouse se mexe dentro da div

    mousedown
        - Quando clica e segura dento da div

    mouseup
        - Quando solta o clique

    click
        - Quando clica dento da div

    mouseout
        - Quando tira o mouse da div


CONDI√á√ïES
    IF:
        if(condi√ß√£o){
            True
        } else{
            False
        }


PEGAR HORAS/DIA ATUAL:
    - var horas = new Date().getHours()


SWITCH
    var diaSem = new Date().getDay()

    switch(diaSem){
        case 0:
            console.log('Domingo')
            break
        case 1:
            console.log('Segunda')
            break
        case 2:
            console.log('Ter√ßa')
            break
        default:
            console.log('Dia Inv√°lido')
    }

CRIAR UM ELEMENTO COMO DIV, IMG, ETC..
    img = document.createElement('img')

CRIAR UM ATRIBUTO EM UMA DIV, IMG, ETC..
    Nesse caso criaremos um atributo ID, que tenha um valor chamado FOTO 
    img.setAtribute('id', 'foto')

JOGAR UMA CRIA√á√ÉO DE DIV, IMG, ETC PARA O HTML
    Por exemplo, jogar na DIV, id="res"
    var res = document.querySelector('div#res')
    res.appendChild(img)

REPETI√á√ïES

    REPETI√á√ÉO NO IN√çCIO:
        WHILE
            while(condi√ß√£o){
                // c√≥digo
            }
    
    REPETI√á√ÉO NO FIM:
        DO
            do{
                // c√≥digo
            } while(condi√ß√£o)

VARI√ÅVEIS SIMPLES
    S√≥ podem armazenar um valor por vez

VARI√ÅVEIS COMPOSTAS
    Devem ser capazes de armazenar v√°rios valores em 
    uma mesma estrutura

LISTA
    let num = [0,1,2,3]

    Para adicionar um valor a LISTA:
        num.push(4)
            [0,1,2,3,4]
    
    Para excluir um valor de uma LISTA:
        num.pop()
            [0,1,2,3]

TRANSFORMAR WORD IN A LIST
    Using the spread operator:

    let arr = [...str];
    Or Array.from

    let arr = Array.from(str);
    Or split with the new u RegExp flag:

    let arr = str.split(/(?!$)/u);
    Examples:

    [...'ùüôùüöùüõ']        // ‚Äî> ["ùüô", "ùüö", "ùüõ"]
    [...'üòéüòúüôÉ']     // ‚Äî> ["üòé", "üòú", "üôÉ"]

SELECIONAR AS OPTIONS DE UM SELECT
    ES6

    [...select.options].filter(option => option.selected).map(option => option.value)
    Where select is a reference to the <select> element.

    To break it down:

    [...select.options] takes the Array-like list of options and destructures it so that we can use Array.prototype methods on it (Edit: also consider using Array.from())
    filter(...) reduces the options to only the ones that are selected
    map(...) converts the raw <option> elements into their respective values

OBJETO
    no Javascript, objeto √© parecido com o dicion√°rio do Python
        let dia = {
            segunda: 'chuva', 
            ter√ßa: 'sol', 
            quarta: 'nublado',
        }
    Na key n√£o tem aspas ''

ADICIONAR CLASSE A UMA TAG
    tag.classList.add('paciente-invalido')

FUN√á√ÉO ANONIMA
    titulo.addEventListener('click', function (){
        console.log('Essa √© uma func√ß√£o anonima, fui clicado')
    })



    A p√°gina de J√©ssica recarrega, porque ela est√° clicando em um bot√£o dentro de um formul√°rio. Por padr√£o, os dados s√£o enviados e p√°gina √© recarregada.

Se quisermos evitar esse comportamento, a J√©ssica deve chamar a fun√ß√£o event.preventDefault() dentro de sua fun√ß√£o an√¥nima. Desta forma, o form n√£o recarregar√° a p√°gina.

// Imports
import * as funcoes from './function'

import somaFunction from './soma'

console.log(somaFunction(5,2))
console.log(funcoes.soma(1,2))
console.log(funcoes.mult(2,2))
console.log(funcoes.sub(1,2))

// Classes
class List {
    constructor(){
        this.data = []
    }
    add(data){
        this.data.push(data)
        console.log(this.data)
    }
}


class TodoList extends List{
    constructor(){
        super()

        this.usuario = "Luan"
    }

    mostraUsuario(){
        console.log(this.usuario)
    }

}

const MinhaLista = new TodoList();

document.querySelector('button').onclick = () => {
    MinhaLista.add('Novo Todo');
    MinhaLista.mostraUsuario()
}

const arr = [1,3,3,4,2,6]


// Map
const newArr = arr.map((item, index) => item + index)
    // [1, 3, 5, 7, 9, 11]

// Reduce
const sum = arr.reduce((total, next) => total + next)
    //21

// Filter
const filter = arr.filter(item => item % 2 == 0)
    // [2, 4, 6]

// Find
const find = arr.find(item => item == 2)
    // 2

// Desestrutura√ß√£o
const usuario = {
    nome: 'Luan',
    idade: 24,
    endere√ßo: {
        cidade: "S√£o Bernardo",
        estado: "SP"
    }
}

const {nome, idade, endere√ßo: {cidade}} = usuario

console.log(nome)
console.log(idade)
console.log(cidade)

// Rest Operator

const usuario2 = {
    nome2: "Luan",
    idade2: 24,
    empresa: "Multidados"
}

const {nome2, ...resto} = usuario2

console.log(nome2)
console.log(resto)

// Spread Operator
// Para somar propriedades ou trocar
// valores de objetos...

const usuario3 = {
    nome2: "Luan",
    idade2: 24,
    empresa: "Multidados"
}

const usuario4 = { ...usuario3, nome2: "Teste" }

console.log(usuario4)

// Async await

const minhaPromisse = () => new Promise((resolve, reject) => {
    setTimeout(() => resolve('ok'), 2000)
})

// √â uma fun√ß√£o
// minhaPromisse()
//     .then(response => console.log(response))
//     .catch(error => console.log(error))

async function executaPromisse() {
    console.log(await minhaPromisse())
    console.log(await minhaPromisse())
    console.log(await minhaPromisse())
}

executaPromisse()